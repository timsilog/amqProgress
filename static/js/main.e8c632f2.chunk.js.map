{"version":3,"sources":["components/ProgressItem/ProgressItem.js","components/VideoPlayer/VideoPlayer.js","components/UserPage/UserPage.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["ProgressItem","props","className","onClick","item","songId","songName","anime","english","songType","hits","misses","VideoPlayer","src","id","controls","key","_id","songLink","map","i","url","process","API_URL_PROGRESS","withRouter","match","useState","progress","setProgress","currentDisplay","setCurrentDisplay","history","useHistory","useEffect","unlisten","listen","location","action","a","fetch","params","username","response","json","currentProgress","length","offset","updateProgress","prev","getProgress","handleClick","searchText","setSearchText","onChange","e","target","value","onSubmit","push","type","App","basename","path","exact","render","component","UserPage","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wXA2CeA,G,MAhBM,SAACC,GACpB,OACE,yBAAKC,UAAU,0BAA0BC,QAASF,EAAME,SACtD,8BACA,yBAAKD,UAAU,aAAaD,EAAMG,KAAKC,OAAOC,UAE9C,6BAAML,EAAMG,KAAKC,OAAOE,MAAMC,SAI9B,yBAAKN,UAAU,aAAaD,EAAMG,KAAKC,OAAOI,UAC9C,yBAAKP,UAAU,YAAf,UAA8BD,EAAMG,KAAKM,KAAzC,YAAiDT,EAAMG,KAAKM,KAAOT,EAAMG,KAAKO,YChBrEC,G,MAnBK,SAACX,GACnB,OACEA,EAAMY,IACF,yBAAKC,GAAG,eACR,4BAAKb,EAAMY,IAAIR,OAAOC,UACtB,6BAAML,EAAMY,IAAIR,OAAOE,MAAMC,SAC7B,2BAAOO,UAAQ,EAACC,IAAKf,EAAMY,IAAII,KAC5BhB,EAAMY,IAAIR,OAAOa,SAASC,KAAI,SAACN,EAAKO,GAAN,OAAY,4BAAQP,IAAKA,EAAKG,IAAKI,OADpE,aAKA,2BAAOL,UAAQ,GAAf,cCRFM,G,MAAMC,+HAAYC,kBA4DTC,eA1DE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACEC,mBAAS,IADX,mBACvBC,EADuB,KACbC,EADa,OAEcF,mBAAS,IAFvB,mBAEvBG,EAFuB,KAEPC,EAFO,KAGxBC,EAAUC,cAEhBC,qBAAU,WACR,IAAMC,EAAWH,EAAQI,QAAO,SAACC,EAAUC,GAC1B,SAAXA,GACFT,EAAY,OAoBhB,OAjBiB,uCAAG,kCAAAU,EAAA,sEACGC,MAAM,GAAD,OAAIlB,EAAJ,qBAAoBI,EAAMe,OAAOC,WADzC,cACdC,EADc,gBAEWA,EAASC,OAFpB,WAEdC,EAFc,OAE4BjB,WACrBiB,EAAgBC,OAHvB,iDAMlBf,EAAkBc,EAAgB,IAC9BE,EAAS,GACPC,EAAiB,SAAAC,GAAI,4BAAQA,GAAR,YAAiBJ,KAR1B,aASXA,GAAmBA,EAAgBC,OAAS,GATjC,wBAUhBjB,EAAYmB,GAVI,UAWCR,MAAM,GAAD,OAAIlB,EAAJ,qBAAoBI,EAAMe,OAAOC,SAAjC,mBAAoDK,IAX1D,eAWhBJ,EAXgB,iBAYSA,EAASC,OAZlB,QAYhBC,EAZgB,OAY0BjB,SAC1CmB,GAAU,GAbM,4DAAH,oDAgBjBG,GACO,WACLf,OAED,CAACT,EAAOM,IAMX,OACEJ,EAASkB,OAEP,yBAAK/B,GAAG,aACN,6BAAMW,EAAMe,OAAOC,UACnB,yBAAKvC,UAAU,mBACb,yBAAKA,UAAU,gCACZyB,EAASR,KAAI,SAACf,EAAMgB,GAAP,OAAa,kBAAC,EAAD,CACzBhB,KAAMA,EACNY,IAAKZ,EAAKa,IACVd,QAAS,kBAdD,SAACiB,GACnBU,EAAkBH,EAASP,IAaF8B,CAAY9B,UAG/B,kBAAC,EAAD,CAAaP,IAAKgB,GAAkC,OAIxD,yBAAKf,GAAG,aAAR,0CCtCSU,G,MAAAA,aApBA,WAAO,IAAD,EACiBE,mBAAS,IAD1B,mBACZyB,EADY,KACAC,EADA,KAEbrB,EAAUC,cAMhB,OACE,yBAAKlB,GAAG,UAAR,mBAEE,0BACEuC,SAAU,SAAAC,GAAC,OAAIF,EAAcE,EAAEC,OAAOC,QACtCC,SATS,SAAAH,GACbvB,EAAQ2B,KAAR,WAAiBP,MASb,2BAAOQ,KAAK,eCELC,G,MAdH,WACV,OACE,6BACE,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,6CACpC,kBAAC,IAAD,CAAOF,KAAK,aAAaG,UAAWC,SCD1BC,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAAS5C,MACvB,2DCZN6C,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8c632f2.chunk.js","sourcesContent":["import React from 'react';\nimport './ProgressItem.scss'\n\n/* SAMPLE PROPS\n  item: {\n    \"correctGuesses\":[\"Steins;Gate 0\"],\n    \"incorrectGuesses\":[],\n    \"_id\":\"5ebb9917e6cbfb897766ef5b\",\n    \"userId\":\"5ebb943a5366b187adf66118\",\n    \"songId\":{\n      \"anime\":{\n        \"english\":\"Steins;Gate\",\n        \"romaji\":\"Steins;Gate\",\n        \"native\":\"シュタインズ・ゲート\"\n      },\n      \"songLink\":[\"https://files.catbox.moe/akg1vv.webm\"],\n      \"_id\":\"5ebb9917e6cbfb897766ef5a\",\n      \"songName\":\"Sky Clad no Kansokusha\",\n      \"songType\":\"Ending 2\",\n      \"__v\":0\n    },\n    \"hits\":1,\n    \"misses\":0,\n    \"__v\":0\n  }\n*/\n\nconst ProgressItem = (props) => {\n  return (\n    <div className='progress-item-container' onClick={props.onClick}>\n      <div></div>\n      <div className='song-name'>{props.item.songId.songName}</div>\n      {/* <div className='anime-container'> */}\n      <div>{props.item.songId.anime.english}</div>\n      {/* <div>{props.item.songId.anime.romaji}</div> */}\n      {/* <div>{props.item.songId.anime.native}</div> */}\n      {/* </div> */}\n      <div className='song-type'>{props.item.songId.songType}</div>\n      <div className='accuracy'>{`${props.item.hits}/${props.item.hits + props.item.misses}`}</div>\n    </div>\n  )\n}\n\nexport default ProgressItem;","import React from 'react';\nimport './VideoPlayer.scss';\n\nconst VideoPlayer = (props) => {\n  return (\n    props.src\n      ? <div id='videoplayer'>\n        <h3>{props.src.songId.songName}</h3>\n        <div>{props.src.songId.anime.english}</div>\n        <video controls key={props.src._id}>\n          {props.src.songId.songLink.map((src, i) => <source src={src} key={i}></source>)}\n        No video\n      </video>\n      </div>\n      : <video controls>\n        No Video\n      </video>\n\n\n  )\n}\n\nexport default VideoPlayer;","import React, { useState, useEffect } from 'react';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport ProgressItem from '../ProgressItem/ProgressItem';\nimport VideoPlayer from '../VideoPlayer/VideoPlayer';\nimport './UserPage.scss'\n\nconst url = process.env.API_URL_PROGRESS\n\nconst UserPage = ({ match }) => {\n  const [progress, setProgress] = useState([]);\n  const [currentDisplay, setCurrentDisplay] = useState({});\n  const history = useHistory();\n\n  useEffect(() => {\n    const unlisten = history.listen((location, action) => {\n      if (action === 'PUSH') {\n        setProgress([]);\n      }\n    })\n    const getProgress = async () => {\n      let response = await fetch(`${url}?username=${match.params.username}`);\n      let currentProgress = (await response.json()).progress;\n      if (!currentProgress || !currentProgress.length) {\n        return;\n      }\n      setCurrentDisplay(currentProgress[0])\n      let offset = 50;\n      const updateProgress = prev => [...prev, ...currentProgress];\n      while (currentProgress && currentProgress.length > 0) {\n        setProgress(updateProgress);\n        response = await fetch(`${url}?username=${match.params.username}&offset=${offset}`);\n        currentProgress = (await response.json()).progress;\n        offset += 50;\n      }\n    }\n    getProgress();\n    return () => {\n      unlisten();\n    }\n  }, [match, history]);\n\n  const handleClick = (i) => {\n    setCurrentDisplay(progress[i]);\n  }\n\n  return (\n    progress.length\n      ?\n      <div id='user-page'>\n        <div>{match.params.username}</div>\n        <div className='songs-container'>\n          <div className='progress-item-list-container'>\n            {progress.map((item, i) => <ProgressItem\n              item={item}\n              key={item._id}\n              onClick={() => handleClick(i)}\n            />)}\n          </div>\n          <VideoPlayer src={currentDisplay ? currentDisplay : {}} />\n        </div>\n      </div>\n      :\n      <div id='user-page'>This user doesn't have any progress</div>\n  )\n}\n\nexport default withRouter(UserPage);","import React, { useState } from 'react';\nimport './Navbar.scss';\nimport { useHistory, withRouter } from 'react-router-dom';\n\nconst Navbar = () => {\n  const [searchText, setSearchText] = useState('');\n  const history = useHistory();\n\n  const submit = e => {\n    history.push(`/${searchText}`);\n  }\n\n  return (\n    <nav id='navbar'>\n      Search for user:\n      <form\n        onChange={e => setSearchText(e.target.value)}\n        onSubmit={submit}>\n        <input type='text' />\n      </form>\n    </nav>\n  )\n}\n\nexport default withRouter(Navbar);","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport UserPage from './components/UserPage/UserPage';\nimport Navbar from './components/Navbar/Navbar';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div>\n      <Router basename='/'>\n        <Navbar />\n        <Switch>\n          <Route path='/' exact render={() => <div>Home page</div>} />\n          <Route path='/:username' component={UserPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}